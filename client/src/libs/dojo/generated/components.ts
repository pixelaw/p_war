/* Autogenerated file. Do not edit manually. */

import { defineComponent, Type as RecsType, World } from "@dojoengine/recs";

export type ContractComponents = Awaited<ReturnType<typeof defineContractComponents>>;

export function defineContractComponents(world: World) {
  return {
    AllowedApp: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, contract: RecsType.BigInt, is_allowed: RecsType.Boolean },
        {
          metadata: {
            namespace: "pixelaw",
            name: "AllowedApp",
            types: ["u32", "contractaddress", "bool"],
            customTypes: [],
          },
        }
      );
    })(),
    AllowedColor: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, color: RecsType.Number, is_allowed: RecsType.Boolean },
        {
          metadata: {
            namespace: "pixelaw",
            name: "AllowedColor",
            types: ["u32", "u32", "bool"],
            customTypes: [],
          },
        }
      );
    })(),
    App: (() => {
      return defineComponent(
        world,
        { system: RecsType.BigInt, name: RecsType.BigInt, icon: RecsType.BigInt, action: RecsType.BigInt },
        {
          metadata: {
            namespace: "pixelaw",
            name: "App",
            types: ["contractaddress", "felt252", "felt252", "felt252"],
            customTypes: [],
          },
        }
      );
    })(),
    AppName: (() => {
      return defineComponent(
        world,
        { name: RecsType.BigInt, system: RecsType.BigInt },
        {
          metadata: {
            namespace: "pixelaw",
            name: "AppName",
            types: ["felt252", "contractaddress"],
            customTypes: [],
          },
        }
      );
    })(),
    AppUser: (() => {
      return defineComponent(
        world,
        { system: RecsType.BigInt, player: RecsType.BigInt, action: RecsType.BigInt },
        {
          metadata: {
            namespace: "pixelaw",
            name: "AppUser",
            types: ["contractaddress", "contractaddress", "felt252"],
            customTypes: [],
          },
        }
      );
    })(),
    Board: (() => {
      return defineComponent(
        world,
        {
          id: RecsType.Number,
          origin: { x: RecsType.Number, y: RecsType.Number },
          width: RecsType.Number,
          height: RecsType.Number,
        },
        {
          metadata: {
            namespace: "pixelaw",
            name: "Board",
            types: ["u32", "u32", "u32", "u32", "u32"],
            customTypes: ["Position"],
          },
        }
      );
    })(),
    CoreActionsAddress: (() => {
      return defineComponent(
        world,
        { key: RecsType.BigInt, value: RecsType.BigInt },
        {
          metadata: {
            namespace: "pixelaw",
            name: "CoreActionsAddress",
            types: ["felt252", "contractaddress"],
            customTypes: [],
          },
        }
      );
    })(),
    Game: (() => {
      return defineComponent(
        world,
        {
          id: RecsType.Number,
          start: RecsType.BigInt,
          end: RecsType.BigInt,
          proposal_idx: RecsType.Number,
          base_cost: RecsType.Number,
          const_val: RecsType.Number,
          coeff_own_pixels: RecsType.Number,
          coeff_commits: RecsType.Number,
          winner_config: RecsType.Number,
          winner: RecsType.BigInt,
          guild_ids: RecsType.StringArray,
          guild_count: RecsType.Number,
        },
        {
          metadata: {
            namespace: "pixelaw",
            name: "Game",
            types: ["u32", "u64", "u64", "u32", "u32", "u32", "u32", "u32", "u32", "contractaddress", "u32"],
            customTypes: [],
          },
        }
      );
    })(),
    GameId: (() => {
      return defineComponent(
        world,
        { x: RecsType.Number, y: RecsType.Number, value: RecsType.Number },
        {
          metadata: {
            namespace: "pixelaw",
            name: "GameId",
            types: ["u32", "u32", "u32"],
            customTypes: [],
          },
        }
      );
    })(),
    GamePalette: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, length: RecsType.Number },
        {
          metadata: {
            namespace: "pixelaw",
            name: "GamePalette",
            types: ["u32", "u32"],
            customTypes: [],
          },
        }
      );
    })(),
    Guild: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          guild_id: RecsType.Number,
          guild_name: RecsType.BigInt,
          creator: RecsType.BigInt,
          members: RecsType.StringArray,
          member_count: RecsType.Number,
        },
        {
          metadata: {
            namespace: "pixelaw",
            name: "Guild",
            types: ["u32", "u32", "felt252", "contractaddress", "u32"],
            customTypes: [],
          },
        }
      );
    })(),
    InPalette: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, color: RecsType.Number, value: RecsType.Boolean },
        {
          metadata: {
            namespace: "pixelaw",
            name: "InPalette",
            types: ["u32", "u32", "bool"],
            customTypes: [],
          },
        }
      );
    })(),
    Instruction: (() => {
      return defineComponent(
        world,
        { system: RecsType.BigInt, selector: RecsType.BigInt, instruction: RecsType.BigInt },
        {
          metadata: {
            namespace: "pixelaw",
            name: "Instruction",
            types: ["contractaddress", "felt252", "felt252"],
            customTypes: [],
          },
        }
      );
    })(),
    PWarPixel: (() => {
      return defineComponent(
        world,
        { position: { x: RecsType.Number, y: RecsType.Number }, owner: RecsType.BigInt },
        {
          metadata: {
            namespace: "pixelaw",
            name: "PWarPixel",
            types: ["u32", "u32", "contractaddress"],
            customTypes: ["Position"],
          },
        }
      );
    })(),
    PaletteColors: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, idx: RecsType.Number, color: RecsType.Number },
        {
          metadata: {
            namespace: "pixelaw",
            name: "PaletteColors",
            types: ["u32", "u32", "u32"],
            customTypes: [],
          },
        }
      );
    })(),
    Permissions: (() => {
      return defineComponent(
        world,
        {
          allowing_app: RecsType.BigInt,
          allowed_app: RecsType.BigInt,
          permission: {
            app: RecsType.Boolean,
            color: RecsType.Boolean,
            owner: RecsType.Boolean,
            text: RecsType.Boolean,
            timestamp: RecsType.Boolean,
            action: RecsType.Boolean,
          },
        },
        {
          metadata: {
            namespace: "pixelaw",
            name: "Permissions",
            types: ["contractaddress", "contractaddress", "bool", "bool", "bool", "bool", "bool", "bool"],
            customTypes: ["Permission"],
          },
        }
      );
    })(),
    Pixel: (() => {
      return defineComponent(
        world,
        {
          x: RecsType.Number,
          y: RecsType.Number,
          app: RecsType.BigInt,
          color: RecsType.Number,
          created_at: RecsType.BigInt,
          updated_at: RecsType.BigInt,
          timestamp: RecsType.BigInt,
          owner: RecsType.BigInt,
          text: RecsType.BigInt,
          action: RecsType.BigInt,
        },
        {
          metadata: {
            namespace: "pixelaw",
            name: "Pixel",
            types: [
              "u32",
              "u32",
              "contractaddress",
              "u32",
              "u64",
              "u64",
              "u64",
              "contractaddress",
              "felt252",
              "felt252",
            ],
            customTypes: [],
          },
        }
      );
    })(),
    PixelRecoveryRate: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, rate: RecsType.BigInt },
        {
          metadata: {
            namespace: "pixelaw",
            name: "PixelRecoveryRate",
            types: ["u32", "u64"],
            customTypes: [],
          },
        }
      );
    })(),
    Player: (() => {
      return defineComponent(
        world,
        {
          address: RecsType.BigInt,
          max_px: RecsType.Number,
          num_owns: RecsType.Number,
          num_commit: RecsType.Number,
          current_px: RecsType.Number,
          last_date: RecsType.BigInt,
          is_banned: RecsType.Boolean,
        },
        {
          metadata: {
            namespace: "pixelaw",
            name: "Player",
            types: ["contractaddress", "u32", "u32", "u32", "u32", "u64", "bool"],
            customTypes: [],
          },
        }
      );
    })(),
    PlayerVote: (() => {
      return defineComponent(
        world,
        {
          player: RecsType.BigInt,
          game_id: RecsType.Number,
          index: RecsType.Number,
          is_in_favor: RecsType.Boolean,
          px: RecsType.Number,
        },
        {
          metadata: {
            namespace: "pixelaw",
            name: "PlayerVote",
            types: ["contractaddress", "u32", "u32", "bool", "u32"],
            customTypes: [],
          },
        }
      );
    })(),
    Proposal: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          index: RecsType.Number,
          author: RecsType.BigInt,
          proposal_type: RecsType.Number,
          target_args_1: RecsType.Number,
          target_args_2: RecsType.Number,
          start: RecsType.BigInt,
          end: RecsType.BigInt,
          yes_px: RecsType.Number,
          no_px: RecsType.Number,
          is_activated: RecsType.Boolean,
        },
        {
          metadata: {
            namespace: "pixelaw",
            name: "Proposal",
            types: ["u32", "u32", "contractaddress", "u8", "u32", "u32", "u64", "u64", "u32", "u32", "bool"],
            customTypes: [],
          },
        }
      );
    })(),
    QueueItem: (() => {
      return defineComponent(
        world,
        { id: RecsType.BigInt, valid: RecsType.Boolean },
        {
          metadata: {
            namespace: "pixelaw",
            name: "QueueItem",
            types: ["felt252", "bool"],
            customTypes: [],
          },
        }
      );
    })(),
  };
}
